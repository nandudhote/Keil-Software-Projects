C51 COMPILER V9.60.0.0   CT_MAIN                                                           07/03/2025 14:18:54 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CT_MAIN
OBJECT MODULE PLACED IN .\Objects\CT_Main.obj
COMPILER INVOKED BY: D:\Nandkishor\Software\C51\BIN\C51.EXE CT_Main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include) DEFINE
                    -(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Listings\CT_Main.lst) TABS(2) OBJECT(.\Objects\CT_Main.obj)

line level    source

   1          #include "N76E003.h"
   2          
   3          // i2c variable start //
   4          #define I2C_CLOCK            13
   5          #define EEPROM_SLA           0x15//0xA4     //0x15 //0x20  //0xA4  //   // 
   6          
   7          void Init_I2C(void);
   8          
   9          unsigned char temp _at_ 0x08;
  10          unsigned char idata itemp _at_ 0x80;
  11          unsigned char xdata xtemp _at_ 0x80;
  12          
  13          uint16_t findMax(uint16_t arr[], uint8_t size);
  14          double map(long x, float in_min, float in_max, float out_min, float out_max);
  15          
  16          #define CTSampleSize  10
  17          #define avgSamples    50
  18          uint16_t CT[CTSampleSize]={0,};
  19          
  20          signed int adcval = 0;
  21          uint32_t adcAvg = 0;
  22          uint16_t finalADCAVG = 0;
  23          uint8_t sampleCounter = 0;
  24          uint16_t x = 0x24A6;
  25          /*==========================================================================*/
  26          void main (void) 
  27          {
  28   1        uint8_t a=0;
  29   1          InitialUART1_Timer3(115200);
  30   1          TI_1 = 1;
  31   1          Enable_ADC_AIN1;            // Enable AIN1 P3.0 as ADC input, Find in "Function_define.h" - "ADC INIT"
  32   1        
  33   1        /* Initial I2C function */
  34   1          Init_I2C();                                 //initial I2C circuit
  35   1      
  36   1          while(1)
  37   1          {
  38   2            adcval = 0;
  39   2            for(a=0; a<CTSampleSize; a++){
  40   3              clr_ADCF;
  41   3              set_ADCS;                 // ADC start trig signal
  42   3              while(ADCF == 0);
  43   3              adcval = ADCRH;
  44   3              adcval = adcval << 4;
  45   3              adcval |= (ADCRL & 0x0f);
  46   3              CT[a] = adcval;
  47   3              Timer0_Delay1ms(2);
  48   3            }
  49   2            adcAvg = (adcAvg + findMax(CT, CTSampleSize));
  50   2            sampleCounter++;
  51   2            if(sampleCounter >= avgSamples){
  52   3              Timer0_Delay1ms(20);
  53   3              sampleCounter = 0;
  54   3              finalADCAVG = (uint16_t)adcAvg/avgSamples;
C51 COMPILER V9.60.0.0   CT_MAIN                                                           07/03/2025 14:18:54 PAGE 2   

  55   3              adcAvg = 0;
  56   3            } 
  57   2        }
  58   1      }
  59          
  60          uint16_t findMax(uint16_t arr[], uint8_t size){
  61   1        int i=0;
  62   1        uint16_t max=0;
  63   1        for (i=0; i<size; i++){
  64   2          if(arr[i] > max){
  65   3            max = arr[i];
  66   3          }
  67   2        }
  68   1        return max;
  69   1      }
  70          
  71          void Init_I2C(void)
  72          {
  73   1          P13_Quasi_Mode;                         //set SCL (P13) is Quasi mode
  74   1          P14_Quasi_Mode;                         //set SDA (P14) is Quasi mode
  75   1          
  76   1          SDA = 1;                                //set SDA and SCL pins high
  77   1          SCL = 1;
  78   1          
  79   1          set_P0SR_6;                             //set SCL (P06) is  Schmitt triggered input select.
  80   1          
  81   1          set_EI2C;                               //enable I2C interrupt by setting IE1 bit 0
  82   1          set_EA;
  83   1      
  84   1          I2ADDR = EEPROM_SLA;                    //define own slave address
  85   1          set_I2CEN;                              //enable I2C circuit
  86   1          set_AA;
  87   1      }
  88          
  89          void I2C_ISR(void) interrupt 6
  90          {
  91   1        //printf("\n i2c interrupt happend %x", I2STAT);
  92   1          switch (I2STAT)
  93   1          {
  94   2              case 0x00:
  95   2                  STO = 1;
  96   2                  break;
  97   2      
  98   2              case 0x60:
  99   2                  AA = 1;
 100   2                  //P3 = 0x60;
 101   2                  //printf("\ncase 0x60");
 102   2                  //data_received[data_num] = I2DAT;
 103   2                  //printf("\ndata receive inb 0x60 : %x", data_received[data_num]);
 104   2                  break;
 105   2              
 106   2              case 0x68:
 107   2                  P02 = 0;
 108   2                  while(1);
 109   2                  break;
 110   2      
 111   2              case 0x80:
 112   2                  //P3 = 0x80;
 113   2                  //printf("\ndata received\n");
 114   2                  //I2C_start();
 115   2                  //I2C_write_DATA(0x25);
 116   2                  //I2C_stop();
C51 COMPILER V9.60.0.0   CT_MAIN                                                           07/03/2025 14:18:54 PAGE 3   

 117   2              
 118   2                  //data_received[data_num] = I2DAT;
 119   2                  //printf("\ndata receive in 0x80 : %x", data_received[data_num]);
 120   2              /*
 121   2                  data_num++;
 122   2      
 123   2                  if (data_num == 34)
 124   2                      AA = 0;
 125   2                  else
 126   2                      AA = 1;
 127   2              */
 128   2                  break;
 129   2      
 130   2              case 0x88:
 131   2                  //P3 = 0x88;
 132   2                  //data_received[data_num] = I2DAT;
 133   2                  //data_num = 0;
 134   2                  AA = 1;
 135   2                  break;
 136   2      
 137   2              case 0xA0:
 138   2                  //P3 = 0xA0;
 139   2                  AA = 1;
 140   2                  break;
 141   2      
 142   2              case 0xA8:
 143   2                  I2DAT = finalADCAVG/100; // ((finalADCAVG & 0xff00)>>8);
 144   2                  clr_SI;
 145   2                  while (!SI);                            //Check SI set or not
 146   2                  I2DAT = finalADCAVG%100; // (finalADCAVG & 0x00ff);
 147   2                  // data_num++;
 148   2                  AA = 1;
 149   2                  break;
 150   2              
 151   2              case 0xB8:
 152   2                  //P3 = 0xB8;
 153   2                  //I2DAT = data_received[data_num];
 154   2                  //data_num++;
 155   2                  AA = 1;
 156   2                  break;
 157   2      
 158   2              case 0xC0:
 159   2                  AA = 1;
 160   2                  break; 
 161   2      
 162   2              case 0xC8:
 163   2                  //P3 = 0xC8;
 164   2                  AA = 1;
 165   2                  break;        
 166   2          }
 167   1      
 168   1          SI = 0;
 169   1      //    while(STO);
 170   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    473    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31       4
C51 COMPILER V9.60.0.0   CT_MAIN                                                           07/03/2025 14:18:54 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
