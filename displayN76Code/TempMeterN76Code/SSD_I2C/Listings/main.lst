C51 COMPILER V9.60.0.0   MAIN                                                              09/09/2024 14:57:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Nandkishor\Software\C51\BIN\C51.EXE main.c OPTIMIZE(8,SIZE) BROWSE INCDIR(..\Include) DEFINE(FOS
                    -C_160000) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          //#include "N76E003.h"
   2          #include "SS_Display.h"
   3          unsigned char temp _at_ 0x08;
   4          unsigned char idata itemp _at_ 0x80;
   5          unsigned char xdata xtemp _at_ 0x80;
   6          
   7          // i2c variable start //
   8          #define I2C_CLOCK               13
   9          #define EEPROM_SLA              0x09 //0x04// // ESP32 I2C Address
  10          
  11          #define STR_SIZE                6
  12          #define NO_OF_DIGIT             4
  13          UINT8 data_received[STR_SIZE];
  14          UINT8 data_num = 0;
  15          UINT8 ReadingStat = 0;
  16          UINT8 i=0;
  17          
  18          UINT8 BuzzerFlag = 0;
  19          int BuzzerCounter = 0;
  20          //char tempchar[]="1234";
  21          
  22          void Init_I2C(void);
  23          
  24          /*==========================================================================*/
  25          void main (void) 
  26          {
  27   1        // for uart
  28   1          //InitialUART0_Timer3(115200);
  29   1          //TI = 1;   
  30   1        ///////////////
  31   1          // for GPIO CONFIGURE
  32   1          Set_All_GPIO_Quasi_Mode; 
  33   1          /////////////                         // Important, use prinft function must set TI=1;
  34   1          Init_I2C();     
  35   1          
  36   1          while(1)
  37   1          {
  38   2            //printf("\n Hello world");
  39   2            if(ReadingStat == 0){
  40   3              //printf("the value is %c,%c,%c,%c \n",data_received[0],data_received[1],data_received[2],data_receive
             -d[3]);
  41   3              for(i=0; i < NO_OF_DIGIT; i++){
  42   4                SS_DigitControl((char)data_received[i], i);
  43   4                Timer0_Delay1ms(5);
  44   4              }
  45   3              if(BuzzerFlag==1){
  46   4                BuzzerCounter++;
  47   4                if(BuzzerCounter>=30){
  48   5                  //BuzzerCounter=0;
  49   5                  Buzzer = 1;
  50   5                }
  51   4                if(BuzzerCounter>=60){
  52   5                  BuzzerFlag = 0;
  53   5                  BuzzerCounter=0;
C51 COMPILER V9.60.0.0   MAIN                                                              09/09/2024 14:57:04 PAGE 2   

  54   5                  Buzzer = 0;
  55   5                }
  56   4                
  57   4              }
  58   3              else{
  59   4                BuzzerCounter = 0;
  60   4                Buzzer = 0;
  61   4              }
  62   3              
  63   3            }
  64   2            //Timer0_Delay1ms(100);
  65   2          }//
  66   1      }
  67          
  68          void Init_I2C(void)
  69          {
  70   1          P13_Quasi_Mode;                         //set SCL (P13) is Quasi mode
  71   1          P14_Quasi_Mode;                         //set SDA (P14) is Quasi mode
  72   1          
  73   1          SDA = 1;                                //set SDA and SCL pins high
  74   1          SCL = 1;
  75   1          
  76   1          set_P0SR_6;                             //set SCL (P06) is  Schmitt triggered input select.
  77   1          
  78   1          set_EI2C;                               //enable I2C interrupt by setting IE1 bit 0
  79   1          set_EA;
  80   1      
  81   1          I2ADDR = EEPROM_SLA;                    //define own slave address
  82   1          set_I2CEN;                              //enable I2C circuit
  83   1          set_AA;
  84   1      }
  85          
  86          void I2C_ISR(void) interrupt 6
  87          {
  88   1          switch (I2STAT)
  89   1          {
  90   2              case 0x00:
  91   2                  STO = 1;
  92   2                  break;
  93   2      
  94   2              case 0x60:  // 
  95   2                  AA = 1;
  96   2                  //P3 = 0x60;
  97   2                  break;
  98   2              
  99   2              case 0x68:  // Arbitration lost
 100   2                  P02 = 0;
 101   2                  while(1);
 102   2                  break;
 103   2      
 104   2              case 0x80:  // Get here data
 105   2              {
 106   3                //printf("\ndata receive   ");
 107   3                if(I2DAT == 5){ // for buzzer
 108   4                  BuzzerFlag = 1;
 109   4                }
 110   3                if (I2DAT == '('){
 111   4                  ReadingStat = 1;
 112   4                }
 113   3                else if(ReadingStat){
 114   4                  if(I2DAT != ')'){
 115   5                    data_received[data_num] = I2DAT;
C51 COMPILER V9.60.0.0   MAIN                                                              09/09/2024 14:57:04 PAGE 3   

 116   5                    //printf("  %c \n", data_received[data_num]);
 117   5                    data_num++;
 118   5                    if(data_num >= STR_SIZE){
 119   6                      ReadingStat = 0;
 120   6                      data_num = 0;
 121   6                    }
 122   5                  }
 123   4                  else{
 124   5                    //printf("\nReading stop\n");
 125   5                    ReadingStat = 0;
 126   5                    data_num = 0;
 127   5                  }
 128   4                  
 129   4                }
 130   3                  //data_received[data_num] = I2DAT;
 131   3                  //printf("%c",data_received[data_num]);
 132   3                  //if (data_num >= STR_SIZE || data_received[data_num] == ')'){
 133   3                  //  data_num = 0;
 134   3                      //AA = 0;
 135   3                  //}
 136   3                  //data_num++;
 137   3                  //else
 138   3                  //    AA = 1;
 139   3              
 140   3                  break;
 141   3                }
 142   2        
 143   2              case 0x88:
 144   2                  //P3 = 0x88;
 145   2                  //data_received[data_num] = I2DAT;
 146   2                  //data_num = 0;
 147   2                  AA = 1;
 148   2                  break;
 149   2      
 150   2              case 0xA0:
 151   2                  //P3 = 0xA0;
 152   2                  AA = 1;
 153   2                  break;
 154   2      
 155   2              case 0xA8:
 156   2                  //P3 = 0xA0;
 157   2                  //I2DAT = data_received[data_num];
 158   2                  //data_num++;
 159   2                  AA = 1;
 160   2                  break;
 161   2              
 162   2              case 0xB8:
 163   2                  //P3 = 0xB8;
 164   2                  //I2DAT = data_received[data_num];
 165   2                  //data_num++;
 166   2                  AA = 1;
 167   2                  break;
 168   2      
 169   2              case 0xC0:
 170   2                  AA = 1;
 171   2                  break; 
 172   2      
 173   2              case 0xC8:
 174   2                  //P3 = 0xC8;
 175   2                  AA = 1;
 176   2                  break;    
 177   2          }
C51 COMPILER V9.60.0.0   MAIN                                                              09/09/2024 14:57:04 PAGE 4   

 178   1      
 179   1          SI = 0;
 180   1      //    while(STO);
 181   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    318    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
